
#include <bits/stdc++.h>
using namespace std;
class DisjointSet {
    vector<int> rank, parent;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};
int main() {
    DisjointSet ds(7);
    ds.unionByRank(1, 2);
    ds.unionByRank(2, 3);
    ds.unionByRank(4, 5);
    ds.unionByRank(6, 7);
    ds.unionByRank(5, 6);
    if (ds.findUPar(3) == ds.findUPar(7)) {
        cout << "Same\n";
    }
    else cout << "Not same\n";

    ds.unionByRank(3, 7);

    if (ds.findUPar(3) == ds.findUPar(7)) {
        cout << "Same\n";
    }
    else cout << "Not same\n";
    return 0;
}







Kruskal Alorithm:
#include <bits/stdc++.h>
using namespace std;
#define int long long int
class DisjointSet {
    vector<int> rank, parent;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};
int32_t main() {

    int node , edges;
    cin>>node>>edges;
    DisjointSet se(node);
    vector<pair<int, pair<int , int>>> edge;
    for(int i = 1; i <= edges; i++) {
        int u , v ,w;
        cin>>u>>v>>w;
        edge.push_back({ w , {v , u}});
        edge.push_back({ w , {u , v }});

    }
    sort(edge.begin() , edge.end());
    int mstW = 0;
    for(auto it : edge) {
        int wt = it.first;
        int u = it.second.first;
        int v = it.second.second;

    if(se.findUPar(u) != se.findUPar(v)) {
          mstW += wt;
          se.unionByRank(u , v);
    }
    }
    cout<<mstW<<endl;


    return 0;
}

Top sort:

#include<bits/stdc++.h>
using namespace std;
const int N = 1e5 + 9;
vector<int>g[N];
int vis[N];
int indeg[N];
int main() {
    int n,m;

    while(cin>>n>>m && n && m ) {
    while(m--) {
        int u,v;
        cin>>u>>v;
        indeg[v]++;
        g[u].push_back(v);
    }
    vector<int>z;
    for(int i = 1; i <= n; i++) {
        if(indeg[i] == 0) {
            z.push_back(i);
            vis[i] = true;
        }
    }
    vector<int>ans;
    while(ans.size() < n) {
     if(z.empty()) {
        cout<<"IMPOSSIBLE"<<endl;
        return 0;
     }
     int cur = z.back();
     z.pop_back();
     ans.push_back(cur);
     for(auto v: g[cur]) {
        indeg[v]--;
        if(!vis[v] && indeg[v] == 0) {
            z.push_back(v);
        }
     }
    }
     for(auto it: ans) {
        cout<<it<<" ";
     }
    }
}




SSC:
#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 3;
vector <int> g[N] , Tg[N];
int vis[N];
stack<int>st;
void dfs(int u) {
    vis[u] = true;
    for(auto it : g[u]) {
        if(!vis[it]) {
            dfs(it);
        }
    }
    st.push(u);
}
void dfs2(int u) {
    vis[u] = true;
    for(auto it : Tg[u]) {
        if(!vis[it]) {
            dfs2(it);
        }
    }
}
int main() {

   int node , edge;
   cin>>node>>edge;
   for(int i = 0; i < edge; i++) {
    int u , v;
    cin>>u>>v;
    g[u].push_back(v);
   }
   for(int i = 1; i<= node; i++) {
    if(!vis[i]) {
        dfs(i);
    }
   }
   for(int i = 1; i <= node; i++) {
       vis[i] = 0;
    for(auto it : g[i]) {
        Tg[it].push_back(i);
    }
   }
   int scc = 0;
   while(!st.empty()) {
    int node = st.top();
    st.pop();
      if(!vis[node]) {
            scc++;
        dfs2(node);
      }
   }
   cout<<scc<<endl;
    return 0;
}

Dijstra:

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
ll inf = 1e18;
const int N = 2e5+5;
vector< pair <ll , ll> > g[N];
vector<ll>dist(N , inf);
vector<ll> v;
int par[N];
    ll n , q;

void dijkstra(ll u) {
    set< pair<ll , ll > > st;
    dist[u] = 0;
    st.insert({ 0 , u});
    while(!st.empty()) {
        auto it = *(st.begin());
        ll node = it.second;
        ll dis = it.first;
        st.erase(it);
        for(auto it : g[node]) {
            ll adjNode = it.first;
            ll edgW = it.second;
            if(dis + edgW < dist[adjNode]) {
                if(dist[adjNode] != inf) {
                    st.erase({dist[adjNode] , adjNode});
                    par[adjNode] = 0;
                }
                par[adjNode] = node;

                dist[adjNode] = dis + edgW;
                st.insert({dist[adjNode] , adjNode});
            }
        }
    }
    for(int i = 1; i <= n; i++) {
        cout<<dist[i]<<" ";
    }
    cout<<endl;
    int p = n;
    cout<<"Path : ";
    while(p != 1) {
        v.push_back(p);
        p = par[p];
    }
    v.push_back(p);
    reverse(v.begin() , v.end());
    for(int i = 0; i < v.size(); i++)  {
        cout<<v[i]<<" ";
    }
    cout<<endl;
}
int main() {
    cin>>n>>q;
    while(q--) {
        ll u , v , w;
        cin>>u>>v>>w;
        g[u].push_back({v , w});
        g[v].push_back({ u , w});
    }
    dijkstra(1);


}
Bellman Ford:

#include <bits/stdc++.h>
using namespace std;
#define int long long int
const int INF = LLONG_MAX;
const int N = 2e5 + 5;
vector<tuple<int, int, int>> edges;
vector<int> dist(N, INF);
int par[N];
bool Negative_Cycle = false;
int last_update = -1;
 int flag = true;

void bellmanFord(int n, int src) {
    dist[src] = 0;

    // Step 1: Relax all edges (n-1) times
    for (int i = 1; i <= n - 1; ++i) {
        for (auto edge : edges) {
            int u, v, w;
            tie(u, v, w) = edge;
            if (dist[u] != INF && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                par[v] = u;
            }
        }
    }

    // Step 2: Check for negative weight cycles
    for (auto edge : edges) {
        int u, v, w;
        tie(u, v, w) = edge;
        if (dist[u] != INF && dist[u] + w < dist[v]) {
            Negative_Cycle = true;
            last_update = v;
            par[v] = u;
            break;
        }
    }

    // Step 3: Print the negative cycle if it exists
    if (Negative_Cycle) {
        for (int i = 0; i < n; ++i) {
            last_update = par[last_update]; // Move n steps back to guarantee a cycle
        }

        vector<int> cycle;
        int start_cycle = last_update;
        cycle.push_back(start_cycle);
        int current = par[start_cycle];

        // Build the cycle by following parent links
        while (current != start_cycle) {
            cycle.push_back(current);
            current = par[current];
        }
        cycle.push_back(start_cycle); // Close the cycle
        reverse(cycle.begin(), cycle.end()); // Correct the order

        // Output the cycle
        cout << "YES\n";
        for (int node : cycle) {
            cout << node << " ";
        }
        cout << "\n";
        flag = false;

    }


}

int32_t main() {
    int n, q;
    cin >> n >> q;

    for (int i = 0; i < q; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        edges.push_back(make_tuple(u, v, w));
    }
      fill(par, par + n + 1, -1); // Initialize parents to -1
    for(int i = 1; i <= n; i++) {
        if(dist[i] == INF && flag) {
            bellmanFord(n , i);
        }
        else if(!flag) {
            break;
        }
    }
    if(flag) {
        cout<<"NO"<<endl;
    }


    return 0;
}

Floyd Warshal:

#include<bits/stdc++.h>
using namespace std;
#define int long long int
const int N = 505;
int g[N][N];
const int inf = 1e18;
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int n, m , q;
   cin >> n >> m >> q;
    int cost[N][N];
for(int i = 1; i <= 501; i++) {
    for(int j = 1; j <= 501; j++) {
        if(i == j) {
            cost[i][j] = 0;
        }
        else {
            cost[i][j] = inf;
        }
    }
  }
  while (m--) {
    int u, v , w;
     cin >> u >> v >> w;
    cost[u][v] = min(cost[u][v] ,w);
    cost[v][u] = min(cost[u][v] , w );
  }

  for(int mid = 1; mid <= n; mid++) {
    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= n; j++) {
            cost[i][j] = min(cost[i][j] , cost[i][mid] + cost[mid][j]);
        }
    }
  }
  while(q--) {
    int u , v;
    cin>>u>>v;
    if(cost[u][v] < 0) {
        cout<<"Neagtive Cycle"<<endl;
    }
    else {
        cout<<-1<<endl;
    }

  }



  return 0;
}


